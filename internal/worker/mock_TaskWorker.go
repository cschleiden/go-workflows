// Code generated by mockery v2.53.0. DO NOT EDIT.

package worker

import (
	context "context"

	"github.com/cschleiden/go-workflows/core"
	mock "github.com/stretchr/testify/mock"
)

// MockTaskWorker is an autogenerated mock type for the TaskWorker type
type MockTaskWorker[Task interface{}, Result interface{}] struct {
	mock.Mock
}

// Complete provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTaskWorker[Task, Result]) Complete(_a0 context.Context, _a1 *Result, _a2 *Task) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Result, *Task) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockTaskWorker[Task, Result]) Execute(_a0 context.Context, _a1 *Task) (*Result, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Task) (*Result, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Task) *Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Task) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Extend provides a mock function with given fields: _a0, _a1
func (_m *MockTaskWorker[Task, Result]) Extend(_a0 context.Context, _a1 *Task) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockTaskWorker[Task, Result]) Get(_a0 context.Context, _a1 []core.Queue) (*Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []core.Queue) (*Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []core.Queue) *Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []core.Queue) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: _a0, _a1
func (_m *MockTaskWorker[Task, Result]) Start(_a0 context.Context, _a1 []core.Queue) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []core.Queue) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTaskWorker creates a new instance of MockTaskWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskWorker[Task interface{}, Result interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskWorker[Task, Result] {
	mock := &MockTaskWorker[Task, Result]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
